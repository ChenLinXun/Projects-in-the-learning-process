<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--IoC整合MyBatis：-->
    <!--加载druid.properties配置文件-->
    <context:property-placeholder location="classpath:druid.properties"/>

    <!--依赖Spring容器完成数据源DataSource的创建-->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${druid.driver}"/>
        <property name="url" value="${druid.url}"/>
        <property name="username" value="${druid.username}"/>
        <property name="password" value="${druid.password}"/>

        <property name="initialSize" value="${druid.pool.init}"/>
        <property name="minIdle" value="${druid.pool.minIdle}"/>
        <property name="maxActive" value="${druid.pool.maxActive}"/>
        <property name="maxWait" value="${druid.pool.maxWait}"/>
    </bean>

    <!--依赖Spring容器完成MyBatis的SqlSessionFactory对象的创建-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--配置数据源-->
        <property name="dataSource" ref="druidDataSource"/>
        <!--配置mapper文件路径-->
        <property name="mapperLocations" value="classpath:com/feng/mapper/*Mapper.xml"/>
        <!--配置需要定义别名的POJO-->
        <property name="typeAliasesPackage" value="com.feng.pojo"/>
        <!--可选：配置MyBatis的主配置文件（mybatis-config.xml中可能存在额外配置）-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!--
        加载mapper包中的所有Mapper，通过sqlSessionFactory获取sqlSession，
        通过sqlSession创建所有的Mapper接口对象，并存储到Spring容器
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--配置sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--配置mapper接口-->
        <property name="basePackage" value="com.feng.mapper"/>
    </bean>


    <!--AOP事务管理配置(基于注解)：-->
    <!--声明使用注解完成事务配置-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--AOP事务管理配置(基于xml)：-->
    <!--1.将Spring提供的 事务管理切面类对象 交给Spring容器管理-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--设置数据源-->
        <property name="dataSource" ref="druidDataSource"/>
    </bean>

    <!--2.通过Spring jdbc提供的 tx标签，声明事务管理策略-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--isolation：事务隔离级别  propagation：事务传播机制-->
            <tx:method name="" isolation="" propagation=""/>
            <tx:method name="" isolation="" propagation=""/>
        </tx:attributes>
    </tx:advice>

    <!--3.切点定义，策略引入-->
    <aop:config>
        <aop:pointcut id="crud" expression="execution()"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="crud"/>
    </aop:config>

</beans>