package OOP.static_;
/*静态变量和静态方法的使用*/

/* 静态变量：
 * 定义和内存解释：
 * 定义：类变量也称为静态变量，在类中以static关键字声明，但必须在方法、构造方法和语句块之外
 *      定义了之后这个变量归这个类的所有对象共用
 * 内存解释：存储位置：根据jdk版本的不同，类变量在jvm内存中的位置也不同
 *          jdk8以前：一般认为类变量存储在方法区中，在加载类信息时，类变量的存储空间生成在了方法区的静态域中
 *          jdk8以后：静态域存在于定义类的class对象中的尾部，所以一般认为类变量存储在类的class对象的最后，
 *                   也就是在堆中
 * 共享：静态变量不管放在哪，堆中对象的静态变量属性都指向同一个地址，就是这个静态变量存在的地址（因此形成共享）
 *
 * 使用方法：
 * 定义：在类中，且在方法、构造方法、语句块外定义的属性加上static修饰符
 * 使用：1.类名.static属性      直接使用（规范，推荐）     
 *      2.对象名.static属性     老方法使用
 *
 * 使用细节和注意事项：
 * 1.需要每个类对象共用某个属性时可以使用
 * 2.类变量共享，实例变量由各自对象实例独享
 * 3.注意类变量也必须遵循访问权限机制
 * 4.类变量在类加载时就初始化了（赋了初值，Java中没有赋值的变量时无法调用的），
 *   即使没有创建对象实例也可以用类名直接使用，而普通变量必须在创建实例时（赋初值后）才能被使用
 * 5.类变量的生命周期跟随类的加载开始 ，随着类的销毁而消亡
 */

/* 静态方法：
 * 使用：在类的方法前加上static修饰符，使用时：1.类名.静态方法名（规范，推荐） 2.对象名.静态方法名
 * 使用细节和注意事项：
 * 1.类方法和普通方法一样都是将方法信息存储在方法区，类方法放在静态部分，普通方法放在非静态部分
 * 2.类方法即使没有创建对象实例也可以用类名直接使用
 * 3.静态方法只能访问类的静态变量，并且只能调用类的静态方法（遵守访问权限）
 *   普通方法可以调用静态变量和方法（遵守访问权限） 
 *  （加载有先后，类在内存中加载时静态方法是比普通方法先加载的）
 * 4.静态方法当中不能用this、super关键字 
 *  （静态方法中没有this参数，而普通方法中是隐含的） 
 *  （或者说还是加载先后的问题，先加载静态方法，实例创建肯定在其后）
 * 5.类方法不能被重写（覆盖）
 * 6.不管是静态方法还是普通方法，都不会因为实例的增多而增多，他们都是内存常驻的
 */

public class staticUse {

    public static void main(String[] args) {

        Child ch1 = new Child("天天");
        ch1.joinGame();
        Child ch2 = new Child("开开");
        ch2.joinGame();
        Child ch3 = new Child("心心");
        ch3.joinGame();

        Child.getGameNum();

    }

}

class Child{

    public String name;
    public static int count;

    public Child(String name) {
        this.name = name;
    }

    public void joinGame(){
        System.out.println("小朋友 "+name+" 加入了游戏");
        count++;
    }

    public static void getGameNum(){
        System.out.println(("已经有" + count + "个小朋友在游戏中辣"));
    }

}